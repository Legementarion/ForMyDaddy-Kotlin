package com.lego.admin.formydaddy.activityimport android.os.Bundleimport android.view.MenuItemimport android.widget.ImageButtonimport androidx.appcompat.app.ActionBarDrawerToggleimport androidx.appcompat.app.AppCompatActivityimport androidx.core.view.GravityCompatimport androidx.lifecycle.Observerimport com.crashlytics.android.Crashlyticsimport com.google.android.material.navigation.NavigationViewimport com.lego.admin.formydaddy.Rimport com.lego.admin.formydaddy.viewmodel.MainViewModelimport io.fabric.sdk.android.Fabricimport kotlinx.android.synthetic.main.activity_play.*import kotlinx.android.synthetic.main.app_bar_play.*import kotlinx.android.synthetic.main.content_play.*import org.koin.androidx.viewmodel.ext.android.viewModelclass PlayActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {    lateinit var dominoArray: List<ImageButton>    private val viewModel: MainViewModel by viewModel()    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_play)        setSupportActionBar(toolbar)        Fabric.with(this, Crashlytics())        val toggle = ActionBarDrawerToggle(this, drawerMenu, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)        drawerMenu.addDrawerListener(toggle)        toggle.syncState()        dominoArray = listOf(imageButton1, imageButton2, imageButton3, imageButton4, imageButton5,                imageButton6, imageButton7, imageButton8, imageButton9, imageButton10,                imageButton11, imageButton12, imageButton13, imageButton14, imageButton15,                imageButton16, imageButton17, imageButton18, imageButton19, imageButton20,                imageButton21, imageButton22, imageButton23, imageButton24, imageButton25,                imageButton26, imageButton27, imageButton28)        navigationView.setNavigationItemSelectedListener(this)        viewModel.getState().observe(this, Observer {            if (it is CancelPick) {                cancelPick()            }            if (it is ShowPick) {                showPick(it.pickId)            }        })        viewModel.startGame(this)    }    override fun onBackPressed() {        if (drawerMenu.isDrawerOpen(GravityCompat.START)) {            drawerMenu.closeDrawer(GravityCompat.START)        } else {            super.onBackPressed()        }    }    override fun onNavigationItemSelected(item: MenuItem): Boolean {        // Handle navigation view item clicks here.        when (item.itemId) {            R.id.nav_game -> {                viewModel.stopGame()                viewModel.startGame(this)            }            R.id.nav_stats -> viewModel.showStats(this)            R.id.nav_help -> viewModel.showRules(this)            R.id.nav_exit -> finish()            else -> {            }        }        drawerMenu.closeDrawer(GravityCompat.START)        return true    }    private fun showPick(pick: Int) {        dominoArray.forEach {            if (it.id == pick) {                //todo add some animation                it.setBackgroundResource(resources.getIdentifier("selection_bg", "drawable", packageName))            }        }    }    private fun cancelPick() {        dominoArray.forEach {            it.setBackgroundResource(resources.getIdentifier("colorTransparent", "colors", packageName))        }    }}