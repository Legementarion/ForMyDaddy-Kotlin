package com.lego.admin.formydaddy.logicimport android.util.Logimport com.lego.admin.formydaddy.utils.Nodeimport com.lego.admin.formydaddy.utils.Typeimport java.util.*class Game {    private val DECK_SIZE = 28    private var value: IntArray? = null    private var type: Array<Type>? = null    var tree: Array<Node>    fun Game() {        initGameDeck()        var a:Node        a.    }    private fun initGameDeck() {        tree = arrayOfNulls<Node>(DECK_SIZE)        value = IntArray(DECK_SIZE)        type = arrayOfNulls<Type>(DECK_SIZE)        run {            var i = 0            var j = 6            var type = 0            while (i < DECK_SIZE) {                value[i] = j                type[i] = Type.getTypeByID(type)                if (j == type) {                    type++                    j = 6                }                j--                i++            }        }        value[DECK_SIZE - 1] = 6        shuffle()        var i = 0        var res = 13        var row = 7        while (i < DECK_SIZE) {            if (i < 7) {                tree[i] = Node(null, null)                tree[i].id = Integer.toString(i)                tree[i].value = value!![i]                tree[i].type = type!![i]            } else {                if (i == res) {                    row--                    res += row - 1                }                tree[i] = Node(tree[i - row], tree[i - (row - 1)])                tree[i].id = Integer.toString(i)                tree[i].value = value!![i]                tree[i].type = type!![i]                tree[i - row].children.add(tree[i])                tree[i - (row - 1)].children.add(tree[i])            }            i++        }    }//    private void shuffle() {//        Comparator<Integer> randomCompar = new Comparator<Integer>() {//            private Random random = new Random();////            @Override//            public int compare(Integer o1, Integer o2) {//                return random.nextBoolean() ? -1 : 1;//            }//        };//        sequence = IntStream//                .rangeClosed( 0, len )//                .boxed()//                .sorted( randoMCompar )//                .limit( len / 2 )//                .map( integer -> new int[] {integer, integer} )//                .flatMap( ints -> Arrays.stream( ints ).boxed() )//                .sorted( randoMCompar )//                .mapToInt( i -> i )//                .toArray();//    }    private fun shuffle() {        val rnd = Random()        for (i in 0..value!!.size - 1 - 1) {            val index = rnd.nextInt(value!!.size)            val buf = value!![index]            val temp = type!![index]            value[index] = value!![i]            type[index] = type!![i]            value[i] = buf            type[i] = temp        }    }    fun printTree() {        for (i in tree.indices) {            Log.d("PRINT TREE", tree[i].id)            if (tree[i].getParent() != null) {                for (j in 0..tree[i].getParent().size() - 1)                    Log.d("PRINT TREE", "Parent -" + tree[i].getParent().get(j).getId())            }            if (tree[i].getChildren() != null) {                for (j in 0..tree[i].getChildren().size() - 1)                    Log.d("PRINT TREE", "Children -" + tree[i].getChildren().get(j).getId())            }            Log.d("PRINT TREE", "---------------------")        }    }}