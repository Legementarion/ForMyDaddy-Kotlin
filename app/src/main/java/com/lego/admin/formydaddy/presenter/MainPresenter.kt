package com.lego.admin.formydaddy.presenterimport android.support.v7.app.AlertDialogimport com.arellomobile.mvp.InjectViewStateimport com.arellomobile.mvp.MvpPresenterimport com.lego.admin.formydaddy.DaddyApplicationimport com.lego.admin.formydaddy.Rimport com.lego.admin.formydaddy.activity.PlayActivityimport com.lego.admin.formydaddy.logic.Gameimport javax.inject.Injectimport android.content.Context.MODE_PRIVATEimport android.content.SharedPreferencesimport android.util.Logimport android.view.View@InjectViewStateclass MainPresenter : MvpPresenter<MainView>() {    @Inject    lateinit var mGame: Game    private lateinit var alert: AlertDialog    private lateinit var sPref: SharedPreferences    private val firstPick: Int = 0    private val secondPick: Int = 0    private val DOMINO_STATS = "domino_stats"      //for shared preference    private val DOMINO_WINS = "domino_wins"    init {        DaddyApplication.graph.inject(this)    }    fun startGame(playActivity: PlayActivity) {        mGame.Game()        drawStartDeck(playActivity)    }    private fun drawStartDeck(playActivity: PlayActivity) {        loop@ for (i in 0 until mGame.tree.size) {            mGame.tree[i].View = playActivity.mDominoArray[i]            if (mGame.tree[i].isAlive()) {                val buf = "c" + "_" + mGame.tree[i].value?.first + "_" + mGame.tree[i].value?.second                playActivity.mDominoArray[i].setImageResource(playActivity.resources.getIdentifier(buf, "drawable", playActivity.packageName))                playActivity.mDominoArray[i].isEnabled = true                playActivity.mDominoArray[i].visibility = View.VISIBLE            } else {                playActivity.mDominoArray[i].visibility = View.INVISIBLE                playActivity.mDominoArray[i].isEnabled = false            }        }    }    fun stopGame() {        mGame.stop()    }    fun showStats(playActivity: PlayActivity) {        sPref = playActivity.getPreferences(MODE_PRIVATE)        val stats = sPref.getString(DOMINO_STATS, "0")        val wins = sPref.getString(DOMINO_WINS, "0")        val message = playActivity.resources.getString(R.string.played) +                " " + stats + " " + playActivity.resources.getString(R.string.games) +                "\n" + playActivity.resources.getString(R.string.wins) + " " + wins +                " " + playActivity.resources.getString(R.string.games)        val builder = AlertDialog.Builder(playActivity)        builder.setTitle(R.string.game_stats_title)                .setMessage(message)                .setCancelable(false)                .setNegativeButton(R.string.ok,                        { dialog, _ -> dialog.cancel() })                .setPositiveButton(R.string.clear, { _, _ -> clearData(playActivity) })        val alert = builder.create()        alert.show()    }    private fun clearData(activity: PlayActivity) {        sPref = activity.getPreferences(MODE_PRIVATE)        val ed = sPref.edit()        ed.putString(DOMINO_STATS, "0")        ed.putString(DOMINO_WINS, "0")        ed.apply()    }    private fun increaseStats(activity: PlayActivity, win: Boolean) {        sPref = activity.getPreferences(MODE_PRIVATE)        var stats = sPref.getString(DOMINO_STATS, "0")        var wins = sPref.getString(DOMINO_WINS, "0")        val i: Int        if (win) {            i = Integer.parseInt(wins)            wins = Integer.toString(i + 1)        } else {            i = Integer.parseInt(stats)            stats = Integer.toString(i + 1)        }        val ed = sPref.edit()        ed.putString(DOMINO_STATS, stats)        ed.putString(DOMINO_WINS, wins)        ed.apply()    }    fun showRules(playActivity: PlayActivity) {        val builder = AlertDialog.Builder(playActivity)        builder.setTitle(R.string.game_rules_title)                .setMessage(R.string.game_rules)                .setCancelable(false)                .setNegativeButton(R.string.ok,                        { dialog, _ -> dialog.cancel() })        alert = builder.create()        alert.show()    }}