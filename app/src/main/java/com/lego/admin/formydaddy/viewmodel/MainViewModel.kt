package com.lego.admin.formydaddy.viewmodelimport android.content.Context.MODE_PRIVATEimport android.content.SharedPreferencesimport android.os.Bundleimport android.os.Handlerimport android.widget.ImageButtonimport androidx.appcompat.app.AlertDialogimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.google.firebase.analytics.FirebaseAnalyticsimport com.lego.admin.formydaddy.Rimport com.lego.admin.formydaddy.activity.CancelPickimport com.lego.admin.formydaddy.activity.Eventimport com.lego.admin.formydaddy.activity.PlayActivityimport com.lego.admin.formydaddy.activity.ShowPickimport com.lego.admin.formydaddy.logic.Gameimport com.lego.admin.formydaddy.logic.Nodeimport com.lego.admin.formydaddy.logic.Utilsimport com.lego.admin.formydaddy.logic.Utils.Companion.EVENT_END_OF_GAMEimport com.lego.admin.formydaddy.logic.Utils.Companion.EVENT_GAMESimport com.lego.admin.formydaddy.logic.Utils.Companion.EVENT_WINSclass MainViewModel(private val game: Game, private val firebaseAnalytics: FirebaseAnalytics) : ViewModel() {    private lateinit var alertDialog: AlertDialog    private lateinit var sharedPreferences: SharedPreferences    private var firstPick: Node? = null    private var secondPick: Node? = null    private var newGameStarted: Boolean = true    private val eventSourceLiveData = MutableLiveData<Event>()    fun getState(): LiveData<Event> = eventSourceLiveData    fun startGame(playActivity: PlayActivity) {        if (newGameStarted) {            increaseStats(playActivity)        }        eventSourceLiveData.postValue(CancelPick())        game.game()        drawDeck(playActivity, true)    }    private fun drawDeck(playActivity: PlayActivity, startOfGame: Boolean) {        loop@ for (i in 0 until game.tree.size) {            game.tree[i].dominoView = playActivity.dominoArray[i]            if (game.tree[i].isAlive()) {                if (game.tree[i].isVisible()) {                    val buf = "c" + "_" + game.tree[i].value?.first + "_" + game.tree[i].value?.second                    playActivity.dominoArray[i].setImageResource(playActivity.resources.getIdentifier(buf, "drawable", playActivity.packageName))                    playActivity.dominoArray[i].isEnabled = true                    playActivity.dominoArray[i].isClickable = true                } else {                    playActivity.dominoArray[i].isEnabled = false                    playActivity.dominoArray[i].isClickable = false                }            }            if (startOfGame) {                playActivity.dominoArray[i].setOnClickListener {                    if (game.tree[i].isAlive()) {                        doPick(playActivity, playActivity.dominoArray[i], game.tree[i])                    }                }            }        }    }    private fun doPick(playActivity: PlayActivity, imageButton: ImageButton, node: Node) {        eventSourceLiveData.postValue(ShowPick(imageButton.id))        when {            firstPick == null -> firstPick = node            secondPick == null -> {                secondPick = node                if (firstPick?.dominoView?.id != secondPick?.dominoView?.id) {                    if (game.checkPick(firstPick!!, secondPick!!)) {                        if (game.checkWin()) {                            increaseWin(playActivity)                            showWinnerPopup(playActivity)                        }                    }                    drawDeck(playActivity, false)                }                Handler().postDelayed({                    firstPick = null                    secondPick = null                    eventSourceLiveData.postValue(CancelPick())                }, 400)            }            else -> eventSourceLiveData.postValue(CancelPick())        }    }    private fun showWinnerPopup(playActivity: PlayActivity) {        val message = playActivity.resources.getString(R.string.game_win)        val builder = AlertDialog.Builder(playActivity)        builder.setTitle(R.string.win)                .setMessage(message)                .setCancelable(false)                .setPositiveButton(R.string.more) { _, _ ->                    stopGame()                    startGame(playActivity)                }        val alert = builder.create()        alert.show()    }    fun stopGame() {        eventSourceLiveData.postValue(CancelPick())        game.stop()    }    fun showStats(playActivity: PlayActivity) {        sharedPreferences = playActivity.getPreferences(MODE_PRIVATE)        val stats = sharedPreferences.getString(Utils.DOMINO_STATS, Utils.ZERO)        val wins = sharedPreferences.getString(Utils.DOMINO_WINS, Utils.ZERO)        val message = playActivity.resources.getString(R.string.played) +                " " + stats + " " + playActivity.resources.getString(R.string.games) +                "\n" + playActivity.resources.getString(R.string.wins) + " " + wins +                " " + playActivity.resources.getString(R.string.games)        val builder = AlertDialog.Builder(playActivity)        builder.setTitle(R.string.game_stats_title)                .setMessage(message)                .setCancelable(false)                .setNegativeButton(R.string.ok                ) { dialog, _ -> dialog.cancel() }                .setPositiveButton(R.string.clear) { _, _ -> clearData(playActivity) }        val alert = builder.create()        alert.show()    }    private fun clearData(activity: PlayActivity) {        sharedPreferences = activity.getPreferences(MODE_PRIVATE)        val ed = sharedPreferences.edit()        ed.putString(Utils.DOMINO_STATS, Utils.ZERO)        ed.putString(Utils.DOMINO_WINS, Utils.ZERO)        ed.apply()    }    private fun increaseStats(activity: PlayActivity) {        sharedPreferences = activity.getPreferences(MODE_PRIVATE)        var stats = sharedPreferences.getString(Utils.DOMINO_STATS, Utils.ZERO)        stats?.let {            val i: Int = Integer.parseInt(it)            stats = (i + 1).toString()            val ed = sharedPreferences.edit()            ed.putString(Utils.DOMINO_STATS, stats)            ed.apply()            sendFirebaseEvent(EVENT_GAMES, it)        }    }    private fun increaseWin(activity: PlayActivity) {        sharedPreferences = activity.getPreferences(MODE_PRIVATE)        var wins = sharedPreferences.getString(Utils.DOMINO_WINS, Utils.ZERO)        wins?.let {            val i: Int = Integer.parseInt(it)            wins = (i + 1).toString()            val ed = sharedPreferences.edit()            ed.putString(Utils.DOMINO_WINS, wins)            ed.apply()            sendFirebaseEvent(EVENT_WINS, it)        }    }    fun showRules(playActivity: PlayActivity) {        val builder = AlertDialog.Builder(playActivity)        builder.setTitle(R.string.game_rules_title)                .setMessage(R.string.game_rules)                .setCancelable(false)                .setNegativeButton(R.string.ok                ) { dialog, _ -> dialog.cancel() }        alertDialog = builder.create()        alertDialog.show()    }    private fun sendFirebaseEvent(eventKey: String, eventValue: String) {        val params = Bundle()        params.putString(eventKey, eventValue)        firebaseAnalytics.logEvent(EVENT_END_OF_GAME, params)    }}